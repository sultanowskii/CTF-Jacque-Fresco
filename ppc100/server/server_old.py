import socket
import threading
import random
import time

HOST = ""
PORT = 43100
states = dict()

sock = socket.socket()
sock.bind(('', 43100)) # config
sock.listen(50) # how many connections it's able to have
sock.setsockopt(socket.SOL_SOCKET, socket.SO_REUSEADDR, 1)

print(f"[\033[032m‚úÖ\033[00m]\033[032mSocket server successfuly launched on {PORT} port!\033[0m")
print("[\033[034müë®‚Äç\033[0m]\033[034mServer made by \033[035m\033[004m@sultanowskii\033[0m")
print("[\033[036müìÑ\033[0m]\033[036mServer logs:\033[0m\n")

songs = {"–ù–æ—á–Ω–æ–µ –†–∞–Ω–¥–µ–≤—É": "–∫—Ä–∏—Å –∫–µ–ª—å–º–∏",
         "Immortals": "fall out boys",
         "Show must go on": "the queen|queen",
         "–ü–µ—Å–Ω—è —É–∫–ª–æ–Ω–∏—Å—Ç–∞": "–≥—Ä–æ–±–æ–≤–∞—è –¥–æ—Å–∫–∞",
         "Gymn for the Weekend": "coldplay",
         "1000 –º–∏–ª—å": "–±–∏-2|–±–∏2|–±–∏ 2",
         "–°–µ—Ä–µ–±—Ä—è–Ω—ã–π –°–µ–Ω—Ç—è–±—Ä—å": "–∫—É–∫—Ä—ã–Ω–∏–∫—Å—ã",
         "DEUTSCHLAND": "rammstein",
         "King, Scar.": "scarlxrd",
         "–ó–≤–µ–∑–¥—ã 3000": "—Å–º—ã—Å–ª–æ–≤—ã–µ –≥–∞–ª–ª—é—Ü–∏–Ω–∞—Ü–∏–∏",
         "The Final Countdown": "europe",
         "Slam (Angel Miners)": "awolnation",
         "–°–∏–º—Ñ–æ–Ω–∏—è –æ–≥–Ω—è": "–∞—Ä–∏—è|–∫–∏–ø–µ–ª–æ–≤",
         "Voyage Voyage": "desreless",
         "SAD!": "xxxtentacion",
         "–•–∞–±–∏–±—É–ª–ª–∏–Ω": "–∫—Ä–µ–º–∞—Ç–æ—Ä–∏–π",
         "–°–µ–∫—Ç–æ—Ä –ì–∞–∑–∞": "—Å–µ–∫—Ç–æ—Ä –≥–∞–∑–∞",
         "–•—Ä—É—Å—Ç–∞–ª—å–Ω—ã–π –º–∏—Ä": "–∫—É–∫—Ä—ã–Ω–∏–∫—Å—ã",
         "EZ4ENCE": "the verkkars|verkkars",
         "Take me to Church": "hoizer",
         "Way Down We Go": "kaleo",
         "–ù–µ–∫—Ä–µ—â–µ–Ω–∞—è –ª—É–Ω–∞": "7–±",
         "–•–∞—Ä—É –º–∞–º–±—É—Ä—É": "–Ω–æ–≥—É —Å–≤–µ–ª–æ!|–Ω–æ–≥—É —Å–≤–µ–ª–æ",
         "–ó–∞—â–∏—Ç–Ω–∏–∫ —Å–≤–∏–Ω–µ–π": "–∫–∏—à|–≥–æ—Ä—à–æ–∫|–∫–æ—Ä–æ–ª—å –∏ —à—É—Ç",
         "–¢—Ä–∞—Å—Å–∞ E-95": "–∞–ª–∏—Å–∞",
         "–ü—Ä–∏–∑—Ä–∞–∫–∏ –¢–∞–º-—Ç–∞–º–∞": "–∫–Ω—èzz|–∫–Ω—è–∑—å",
         "Castle in the snow": "kadebostany",
         "U Can't Tocuh This": "mc hammer",
         "Counting Stars": "onerepublic|one republic",
         "–®–∞—Ä —Ü–≤–µ—Ç–∞ –•–∞–∫–∏": "nautilus pompilius|–Ω–∞—É—Ç–∏–ª—É—Å –ø–æ–º–ø–∏–ª–∏—É—Å"
         }

def answer(conn, addr):
    conn.send(bytes("–¢–µ–±–µ –≤—ã–ø–∞–ª–∞ –±–æ–ª—å—à–∞—è —á–µ—Å—Ç—å —Ä–µ—à–∏—Ç—å –≤–µ–ª–∏—á–∞–π—à–µ–µ —É—Ä–∞–≤–Ω–µ–Ω–∏–µ, –ø—Ä–∏–¥—É–º–∞–Ω–Ω–æ–µ –æ–¥–Ω–∏–º –∏–∑ –º–æ–∏—Ö —É—á–µ–Ω–∏–∫–æ–≤.\n", encoding="utf-8"))
    conn.send(bytes("–£—Ä–∞–≤–Ω–µ–Ω–∏–µ: (‚àö(x ‚àí 2) ‚àí 3) * (3^(x^2 - 11x + 30) ‚àí 1) * ln(x + 9) = 0. –ù–∞–∑–æ–≤–∏ –º–Ω–µ –ª—é–±–æ–π x –≤ —Ç–µ—á–µ–Ω–∏–µ 2 –º–∏–Ω—É—Ç. –†–µ—à–∞–π –∞–∫–∫—É—Ä–∞—Ç–Ω–æ –∏ –±—ã—Å—Ç—Ä–æ:\n", encoding="utf-8"))
    while True:
        data = conn.recv(1024).decode("utf-8", errors="ignore").strip()
        if not data:
            conn.send(bytes("–û—Ç–≤–µ—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ.", encoding="utf-8"))
            conn.close()
            print(f"Client \033[031maborted\033[0m connection: {addr}")
            break
        if not data.is_digit():
            conn.send(bytes("–Ø –∂–¥—É –æ—Ç —Ç–µ–±—è —á–∏—Å–ª–æ\n", encoding="utf-8"))
            continue
        if data in ["5", "6", "11"]:
            conn.send(bytes("–û—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞, —Å–µ–π—á–∞—Å —Å—Ö–æ–∂—É –∑–∞ —Ñ–ª–∞–≥–æ–º...\n", encoding="utf-8"))
            break
        else:
            conn.send(bytes("–¢—ã –ø—ã—Ç–∞–ª—Å—è. –ó–∞ —Å—Ç–∞—Ä–∞–Ω–∏–µ —è –¥–∞–º —Ç–µ–±–µ —Ñ–ª–∞–≥. –°–µ–π—á–∞—Å —è –∑–∞ –Ω–∏–º —Å—Ö–æ–∂—É...\n", encoding="utf-8"))
            break
    time.sleep(3)
    conn.send(bytes("[WARNING] Connection is not stable\n", encoding="utf-8"))
    time.sleep(1)
    conn.send(bytes("–ê –≤–æ—Ç –∏ —è. –ì–æ—Ç–æ–≤—å—Å—è –ø–∏—Å–∞—Ç—å, –¥–∏–∫—Ç—É—é –ø–æ –±—É–∫–≤–∞–º:\n", encoding="utf-8"))
    time.sleep(1)
    conn.send(bytes("f\n", encoding="utf-8"))
    time.sleep(1)
    conn.send(bytes("l\n", encoding="utf-8"))
    time.sleep(1)
    conn.send(bytes("a\n", encoding="utf-8"))
    time.sleep(1)
    conn.send(bytes("g\n", encoding="utf-8"))
    time.sleep(1)
    conn.send(bytes("{\n", encoding="utf-8"))
    time.sleep(1)
    conn.send(bytes("d\n", encoding="utf-8"))
    time.sleep(1)
    conn.send(bytes("[ERROR] Connection with Jacque Fresco was interrupted by 3rd client\n", encoding="utf-8"))
    time.sleep(2)
    used_questions = set()
    curr_question = ""
    states[addr] = 0
    conn.send(bytes("–ø—Ä–∏–≤ —ç—Ç–æ –¥–∞–¥–æ. –Ω–µ–æ–±—ã—á–Ω–∞—è –≤—Å—Ç—Ä–µ—á–∞ –Ω–æ –æ–∫. –∫–æ—Ä–æ—á–µ —Ç–∞–º –≤—Å–µ –æ—á —Å–ª–æ–∂–Ω–æ —è –¥–∞—é –æ—á –ø—Ä–æ—Å—Ç—É—é –≤–µ—Ä—Å–∏—é —ç—Ç–æ–≥–æ –ø–ø—Ü –ø—è—Ç—å–¥–µ—Å—è—Ç. —è —Ä–µ—à–∏–ª –æ–±–º–∞–Ω—É—Ç—å —Å–∏—Å—Ç–µ–º—É —à–∞–≥–∞ –≤—Ä–µ—Å–∫–æ. –¥–∞–¥–æ –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç —Ç–∞–∫ –¥–∞–¥–æ –≥–æ–≤–æ—Ä–∏—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ —Ç—ã –ø–∏—à–µ—à—å –∏—Å–ø–æ–ª–Ω–∏—Ç–µ–ª—è –¥–∞–¥–æ –¥–∞–µ—Ç —Ç—Ä—è–ø–∫—É –Ω–∞ –ø–∞–ª–∫–µ –∫–æ—Ç–æ—Ä–∞—è —Ç–µ–±–µ –Ω—É–∂–Ω–∞ –¥–∞. –∏–¥–µ—Ç –æ–∫? –æ—Ç–≤–µ—Ç—å \"–¥–∞\" –∏–ª–∏ \"–Ω–µ—Ç\"\n", encoding="utf-8"))

    def check_answer(line: str):
        if line.lower() in songs[curr_question].split("|"):
            return True
        return False

    def generate_curr_question(used_questions, question):
        used_questions.add(question)
        question = random.choice(list(songs.keys()))
        while question in used_questions:
            question = random.choice(list(songs.keys()))
        return used_questions, question

    while True:
        data = conn.recv(1024).decode("utf-8", errors="ignore").strip()
        if not data:
            conn.send(bytes("–û—Ç–≤–µ—Ç–∞ –Ω–µ –ø–æ–ª—É—á–µ–Ω–æ, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ.", encoding="utf-8"))
            conn.close()
            print(f"Client \033[031maborted\033[0m connection: {addr}")
            break

        if states[addr] == 0:
            if data =="–¥–∞":
                used_questions, curr_question = generate_curr_question(used_questions, curr_question)
                conn.send(bytes("–≤–æ—Ç –Ω–∞–∑–≤–∞–Ω–∏–µ –ø–µ—Å–Ω–∏ —Å–∫–∞–∂–∏ –Ω–∞–∑–≤–∞–Ω–∏–µ –≥—Ä—É–ø–ø—ã –ø–∂ " + curr_question + "\n", encoding="utf-8"))
                states[addr] = 1
            elif data == "–Ω–µ—Ç":
                conn.send(bytes("–æ–∫.\n", encoding="utf8"))
                conn.close()
                print(f"Client \033[031mregreted passing test\033[0m: {addr}")
                break
            else:
                conn.send(bytes("–≤—Å–º –æ—Ç–≤–µ—Ç—å \"–¥–∞\" –∏–ª–∏ \"–Ω–µ—Ç\"", encoding="utf8"))

        elif 1 <= states[addr] < 15:
            if check_answer(data):
                conn.send(bytes("–≤–µ—Ä–Ω–æ.\n", encoding="utf-8"))
                used_questions, curr_question = generate_curr_question(used_questions, curr_question)
                conn.send(bytes(curr_question + "\n", encoding="utf-8"))
                states[addr] += 1
            else:
                conn.send(bytes("–æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π, —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ.\n", encoding="utf-8"))
                conn.close()
                print(f"\033[031mWrong answer\033[0m from client: {addr}")
                break

        elif states[addr] == 15:
            if check_answer(data):
                conn.send(bytes("–≤–µ—Ä–Ω–æ.\n", encoding="utf-8"))
                conn.send(bytes("–æ—Ç–ª–∏—á–Ω–∞—è —Ä–∞–±–æ—Ç–∞ —Ñ—É—Ç–±–æ–ª–∫–∞ –Ω–∞ –ø–∞–ª–∫–µ —Ç–≤–æ—è flag{d4d0_15_f41r_c4p1t4l15t}\n", encoding="utf-8"))
                del states[addr]
                print(f"Client \033[036mSuccessfuly passed the test\033[0m: {addr}")
                conn.close()
                break
            else:
                conn.send(bytes("–æ—Ç–≤–µ—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π.", encoding="utf-8"))
                conn.close()
                print(f"\033[031mWrong answer\033[0m from client: {addr}")
                break

while True:
    conn, addr = sock.accept()
    print(f"Client \033[032mconnected\033[0m: {addr}")
    th = threading.Thread(name=addr, target=answer, args=(conn, addr))
    th.start()